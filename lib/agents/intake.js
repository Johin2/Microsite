import { z } from 'zod'
import { callLLM, llmEnabled } from '../llm'
import { INTAKE_SYSTEM_PROMPT } from '../prompts/intake'
import { ProjectBriefSchema } from '../schemas'

const IntakeRequestSchema = z.object({
  title: z.string(),
  description: z.string(),
  categoryHint: z.string().optional(),
  dueDate: z.string().optional(),
  attachments: z
    .array(
      z.object({
        url: z.string().url(),
        name: z.string()
      })
    )
    .optional()
})

function buildFallbackBrief(input) {
  return {
    projectId: undefined,
    title: input.title,
    summary: input.description.slice(0, 280),
    scope: input.description
      .split('\n')
      .map((line) => line.trim())
      .filter(Boolean)
      .slice(0, 5),
    constraints: input.categoryHint ? [`Category hint: ${input.categoryHint}`] : [],
    successCriteria: ['Acceptance tests autogenerated'],
    categoryGuess: input.categoryHint,
    clarifyingQuestions: [
      'Which acceptance tests are critical?',
      'What environments need coverage?',
      'Are there codebases or assets we must reuse?'
    ],
    attachments: input.attachments ?? []
  }
}

export async function generateProjectBrief(intake) {
  const input = IntakeRequestSchema.parse(intake)

  if (!llmEnabled) {
    return buildFallbackBrief(input)
  }

  const payload = {
    title: input.title,
    description: input.description,
    category_hint: input.categoryHint ?? null,
    due_date: input.dueDate ?? null,
    attachments: input.attachments ?? []
  }

  try {
    const response = await callLLM({
      systemPrompt: INTAKE_SYSTEM_PROMPT,
      userPrompt: JSON.stringify(payload, null, 2),
      schema: ProjectBriefSchema
    })

    return response
  } catch (error) {
    console.warn('LLM intake brief generation failed, using fallback', error)
    return buildFallbackBrief(input)
  }
}
